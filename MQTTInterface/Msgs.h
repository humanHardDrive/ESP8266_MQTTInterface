#ifndef __MSGS_H__
#define __MSGS_H__

#define MAX_PAYLOAD_SIZE  128

struct MSG_BODY
{
  uint8_t cmd;
  uint8_t len;
  uint8_t payload[MAX_PAYLOAD_SIZE];
};

#define MSG_BODY_SIZE   sizeof(MSG_BODY)

enum CMD_TYPE
{
  /*COMMANDS*/
  NO_CMD = 0,
  MEM_READ,
  MEM_WRITE,
  SAVE,
  REBOOT,
  GET_DEVICE_NAME,
  CONNECT_TO_AP,
  DISCONNECT_FROM_AP,
  GET_IP,
  START_AP,
  STOP_AP,
  START_NETWORK_HELPER,
  STOP_NETWORK_HELPER,
  ADD_SUBSCRIPTION,
  REMOVE_SUBSCRIPTION,
  GET_CONNECTION_STATE,
  CONNECT_TO_SERVER,
  DISCONNECT_FROM_SERVER,
  VERSION,
  TIME,
  SET_TIME_OFFSET,
  SET_PUB_ALIAS,
  SET_SUB_ALIAS,
  CLEAR_PUB_LIST,
  CLEAR_SUB_LIST,
  PUB_INFO,
  INVALID_CMD,

  /*NOTIFY*/
  NO_NOTIFY = 0x80,
  NETWORK_STATE_CHANGE,
  NETWORK_CHANGE,
  MQTT_STATE_CHANGE,
  SUBSCRIPTION_CHANGE,
  INVALID_NOTIFY
};

enum NETWORK_STATE_CHANGE_TYPE
{
  NO_CHANGE = 0,
  DISCONNECTED,
  CONNECTING_TO_AP,
  CONNECTED_TO_AP,
  ACTING_AS_AP,
  UNKNOWN_STATE
};

#define MAX_NETWORK_NAME_LENGTH   32

struct ConnectToAPMsg
{
  char SSID[MAX_NETWORK_NAME_LENGTH];
  char password[MAX_NETWORK_NAME_LENGTH];
};

#define MAX_ALIAS_NAME_LENGTH 16

struct SetAliasMsg
{
  uint8_t nIndex;
  char sAlias[MAX_ALIAS_NAME_LENGTH];
};

#endif
